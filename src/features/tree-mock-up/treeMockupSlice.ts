import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { Octokit } from '@octokit/core';
import { Repository } from './models';


const octokit = new Octokit({
    auth: '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'
})

export interface RepositoriesState {
    repositories: Array<Repository>;
    loader: boolean
}

const initialState: RepositoriesState = {
    repositories: [],
    loader: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.   
export const fetchRepositoriesAsync = createAsyncThunk(
    'repositories/fetchRepositories',
    async () => {
        let username: string = 'manjunath-intercax'
        let treeData: any = [];
        const repositoriesResponse = await octokit.request('GET /users/{username}/repos', {
            username
        })
        if (repositoriesResponse?.data?.length) {
            for (let repositoryIndex = 0; repositoryIndex < repositoriesResponse?.data?.length; repositoryIndex++) {
                const repository = repositoriesResponse?.data[repositoryIndex];
                const pullRequestsResponse = await octokit.request('GET /repos/{owner}/{repo}/pulls', {
                    owner: username,
                    repo: repository?.name
                })
                let pullRequestData: any = [];
                if (pullRequestsResponse?.data?.length) {
                    for (let pullRequestIndex = 0; pullRequestIndex < pullRequestsResponse?.data.length; pullRequestIndex++) {
                        const pullRequest = pullRequestsResponse?.data[pullRequestIndex];
                        const pullRequestFilesResponse = await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {
                            owner: username,
                            repo: 'tree-mockup',
                            pull_number: pullRequest?.number
                        })
                        pullRequestData.push({
                            ...pullRequest,
                            files: pullRequestFilesResponse?.data
                        })
                    }

                }
                treeData.push({
                    ...repository,
                    pullRequests: pullRequestData
                })
            }
        }
        // The value we return becomes the `fulfilled` action payload
        return treeData;
    }
);

export const selectRepositories = (state: RootState) => state.treeMockup.repositories;
export const selectLoader = (state: RootState) => state.treeMockup.loader;

export const treeMockupSlice = createSlice({
    name: 'treeMockupSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchRepositoriesAsync.pending, (state) => {
                state.loader = true;
            })
            .addCase(fetchRepositoriesAsync.fulfilled, (state, action) => {
                state.loader = false;
                state.repositories = JSON.parse(JSON.stringify(action.payload))
            })
            .addCase(fetchRepositoriesAsync.rejected, (state) => {
                state.loader = false;
                state.repositories = [];
            });
    },
});

export default treeMockupSlice.reducer;
