/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A git repository
 */
 export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: null | LicenseSimple;
  organization?: null | SimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    [k: string]: unknown;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string | null;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string | null;
  hooks_url: string;
  svn_url: string;
  homepage: string | null;
  language: string | null;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string | null;
  created_at: string | null;
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
      [k: string]: unknown;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    [k: string]: unknown;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  starred_at?: string;
  pullRequests?: Array<PullRequestSimple>
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string | null;
  spdx_id: string | null;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * How the author is associated with the repository.
 */
 export type AuthorAssociation =
 | "COLLABORATOR"
 | "CONTRIBUTOR"
 | "FIRST_TIMER"
 | "FIRST_TIME_CONTRIBUTOR"
 | "MANNEQUIN"
 | "MEMBER"
 | "NONE"
 | "OWNER";
/**
* The status of auto merging a pull request.
*/
export type AutoMerge = {
 enabled_by: SimpleUser11;
 /**
  * The merge method to use.
  */
 merge_method: "merge" | "squash" | "rebase";
 /**
  * Title for the merge commit message.
  */
 commit_title: string;
 /**
  * Commit message for the merge commit.
  */
 commit_message: string;
 [k: string]: unknown;
} | null;
export type Demo = PullRequestSimple[];

/**
* Pull Request Simple
*/
export interface PullRequestSimple {
 url: string;
 id: number;
 node_id: string;
 html_url: string;
 diff_url: string;
 patch_url: string;
 issue_url: string;
 commits_url: string;
 review_comments_url: string;
 review_comment_url: string;
 comments_url: string;
 statuses_url: string;
 number: number;
 state: string;
 locked: boolean;
 title: string;
 user: null | SimpleUser;
 body: string | null;
 labels: {
   id: number;
   node_id: string;
   url: string;
   name: string;
   description: string;
   color: string;
   default: boolean;
   [k: string]: unknown;
 }[];
 milestone: null | Milestone;
 active_lock_reason?: string | null;
 created_at: string;
 updated_at: string;
 closed_at: string | null;
 merged_at: string | null;
 merge_commit_sha: string | null;
 assignee: null | SimpleUser2;
 assignees?: SimpleUser3[] | null;
 requested_reviewers?: SimpleUser4[] | null;
 requested_teams?: Team[] | null;
 head: {
   label: string;
   ref: string;
   repo: Repository;
   sha: string;
   user: null | SimpleUser7;
   [k: string]: unknown;
 };
 base: {
   label: string;
   ref: string;
   repo: Repository1;
   sha: string;
   user: null | SimpleUser10;
   [k: string]: unknown;
 };
 _links: {
   comments: Link;
   commits: Link1;
   statuses: Link2;
   html: Link3;
   issue: Link4;
   review_comments: Link5;
   review_comment: Link6;
   self: Link7;
   [k: string]: unknown;
 };
 author_association: AuthorAssociation;
 auto_merge: AutoMerge;
 /**
  * Indicates whether or not the pull request is a draft.
  */
 draft?: boolean;
 [k: string]: unknown;
 files?: Array<DiffEntry>
}
/**
* Simple User
*/
export interface SimpleUser {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
}
/**
* A collection of related issues and pull requests.
*/
export interface Milestone {
 url: string;
 html_url: string;
 labels_url: string;
 id: number;
 node_id: string;
 /**
  * The number of the milestone.
  */
 number: number;
 /**
  * The state of the milestone.
  */
 state: "open" | "closed";
 /**
  * The title of the milestone.
  */
 title: string;
 description: string | null;
 creator: null | SimpleUser1;
 open_issues: number;
 closed_issues: number;
 created_at: string;
 updated_at: string;
 closed_at: string | null;
 due_on: string | null;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser1 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser2 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser3 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser4 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface Team {
 id: number;
 node_id: string;
 name: string;
 slug: string;
 description: string | null;
 privacy?: string;
 permission: string;
 permissions?: {
   pull: boolean;
   triage: boolean;
   push: boolean;
   maintain: boolean;
   admin: boolean;
   [k: string]: unknown;
 };
 url: string;
 html_url: string;
 members_url: string;
 repositories_url: string;
 parent: null | TeamSimple;
 [k: string]: unknown;
}
/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface TeamSimple {
 /**
  * Unique identifier of the team
  */
 id: number;
 node_id: string;
 /**
  * URL for the team
  */
 url: string;
 members_url: string;
 /**
  * Name of the team
  */
 name: string;
 /**
  * Description of the team
  */
 description: string | null;
 /**
  * Permission that the team will have for its repositories
  */
 permission: string;
 /**
  * The level of privacy this team should have
  */
 privacy?: string;
 html_url: string;
 repositories_url: string;
 slug: string;
 /**
  * Distinguished Name (DN) that team maps to within LDAP environment
  */
 ldap_dn?: string;
 [k: string]: unknown;
}
/**
* A git repository
*/
export interface Repository {
 /**
  * Unique identifier of the repository
  */
 id: number;
 node_id: string;
 /**
  * The name of the repository.
  */
 name: string;
 full_name: string;
 license: null | LicenseSimple;
 organization?: null | SimpleUser5;
 forks: number;
 permissions?: {
   admin: boolean;
   pull: boolean;
   triage?: boolean;
   push: boolean;
   maintain?: boolean;
   [k: string]: unknown;
 };
 owner: SimpleUser6;
 /**
  * Whether the repository is private or public.
  */
 private: boolean;
 html_url: string;
 description: string | null;
 fork: boolean;
 url: string;
 archive_url: string;
 assignees_url: string;
 blobs_url: string;
 branches_url: string;
 collaborators_url: string;
 comments_url: string;
 commits_url: string;
 compare_url: string;
 contents_url: string;
 contributors_url: string;
 deployments_url: string;
 downloads_url: string;
 events_url: string;
 forks_url: string;
 git_commits_url: string;
 git_refs_url: string;
 git_tags_url: string;
 git_url: string;
 issue_comment_url: string;
 issue_events_url: string;
 issues_url: string;
 keys_url: string;
 labels_url: string;
 languages_url: string;
 merges_url: string;
 milestones_url: string;
 notifications_url: string;
 pulls_url: string;
 releases_url: string;
 ssh_url: string;
 stargazers_url: string;
 statuses_url: string;
 subscribers_url: string;
 subscription_url: string;
 tags_url: string;
 teams_url: string;
 trees_url: string;
 clone_url: string;
 mirror_url: string | null;
 hooks_url: string;
 svn_url: string;
 homepage: string | null;
 language: string | null;
 forks_count: number;
 stargazers_count: number;
 watchers_count: number;
 size: number;
 /**
  * The default branch of the repository.
  */
 default_branch: string;
 open_issues_count: number;
 /**
  * Whether this repository acts as a template that can be used to generate new repositories.
  */
 is_template?: boolean;
 topics?: string[];
 /**
  * Whether issues are enabled.
  */
 has_issues: boolean;
 /**
  * Whether projects are enabled.
  */
 has_projects: boolean;
 /**
  * Whether the wiki is enabled.
  */
 has_wiki: boolean;
 has_pages: boolean;
 /**
  * Whether downloads are enabled.
  */
 has_downloads: boolean;
 /**
  * Whether the repository is archived.
  */
 archived: boolean;
 /**
  * Returns whether or not this repository disabled.
  */
 disabled: boolean;
 /**
  * The repository visibility: public, private, or internal.
  */
 visibility?: string;
 pushed_at: string | null;
 created_at: string | null;
 updated_at: string | null;
 /**
  * Whether to allow rebase merges for pull requests.
  */
 allow_rebase_merge?: boolean;
 template_repository?: {
   id?: number;
   node_id?: string;
   name?: string;
   full_name?: string;
   owner?: {
     login?: string;
     id?: number;
     node_id?: string;
     avatar_url?: string;
     gravatar_id?: string;
     url?: string;
     html_url?: string;
     followers_url?: string;
     following_url?: string;
     gists_url?: string;
     starred_url?: string;
     subscriptions_url?: string;
     organizations_url?: string;
     repos_url?: string;
     events_url?: string;
     received_events_url?: string;
     type?: string;
     site_admin?: boolean;
     [k: string]: unknown;
   };
   private?: boolean;
   html_url?: string;
   description?: string;
   fork?: boolean;
   url?: string;
   archive_url?: string;
   assignees_url?: string;
   blobs_url?: string;
   branches_url?: string;
   collaborators_url?: string;
   comments_url?: string;
   commits_url?: string;
   compare_url?: string;
   contents_url?: string;
   contributors_url?: string;
   deployments_url?: string;
   downloads_url?: string;
   events_url?: string;
   forks_url?: string;
   git_commits_url?: string;
   git_refs_url?: string;
   git_tags_url?: string;
   git_url?: string;
   issue_comment_url?: string;
   issue_events_url?: string;
   issues_url?: string;
   keys_url?: string;
   labels_url?: string;
   languages_url?: string;
   merges_url?: string;
   milestones_url?: string;
   notifications_url?: string;
   pulls_url?: string;
   releases_url?: string;
   ssh_url?: string;
   stargazers_url?: string;
   statuses_url?: string;
   subscribers_url?: string;
   subscription_url?: string;
   tags_url?: string;
   teams_url?: string;
   trees_url?: string;
   clone_url?: string;
   mirror_url?: string;
   hooks_url?: string;
   svn_url?: string;
   homepage?: string;
   language?: string;
   forks_count?: number;
   stargazers_count?: number;
   watchers_count?: number;
   size?: number;
   default_branch?: string;
   open_issues_count?: number;
   is_template?: boolean;
   topics?: string[];
   has_issues?: boolean;
   has_projects?: boolean;
   has_wiki?: boolean;
   has_pages?: boolean;
   has_downloads?: boolean;
   archived?: boolean;
   disabled?: boolean;
   visibility?: string;
   pushed_at?: string;
   created_at?: string;
   updated_at?: string;
   permissions?: {
     admin?: boolean;
     maintain?: boolean;
     push?: boolean;
     triage?: boolean;
     pull?: boolean;
     [k: string]: unknown;
   };
   allow_rebase_merge?: boolean;
   temp_clone_token?: string;
   allow_squash_merge?: boolean;
   allow_auto_merge?: boolean;
   delete_branch_on_merge?: boolean;
   allow_update_branch?: boolean;
   allow_merge_commit?: boolean;
   subscribers_count?: number;
   network_count?: number;
   [k: string]: unknown;
 } | null;
 temp_clone_token?: string;
 /**
  * Whether to allow squash merges for pull requests.
  */
 allow_squash_merge?: boolean;
 /**
  * Whether to allow Auto-merge to be used on pull requests.
  */
 allow_auto_merge?: boolean;
 /**
  * Whether to delete head branches when pull requests are merged
  */
 delete_branch_on_merge?: boolean;
 /**
  * Whether to allow merge commits for pull requests.
  */
 allow_merge_commit?: boolean;
 /**
  * Whether to allow forking this repo
  */
 allow_forking?: boolean;
 subscribers_count?: number;
 network_count?: number;
 open_issues: number;
 watchers: number;
 master_branch?: string;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* License Simple
*/
export interface LicenseSimple {
 key: string;
 name: string;
 url: string | null;
 spdx_id: string | null;
 node_id: string;
 html_url?: string;
}
/**
* Simple User
*/
export interface SimpleUser5 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser6 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser7 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* A git repository
*/
export interface Repository1 {
 /**
  * Unique identifier of the repository
  */
 id: number;
 node_id: string;
 /**
  * The name of the repository.
  */
 name: string;
 full_name: string;
 license: null | LicenseSimple1;
 organization?: null | SimpleUser8;
 forks: number;
 permissions?: {
   admin: boolean;
   pull: boolean;
   triage?: boolean;
   push: boolean;
   maintain?: boolean;
   [k: string]: unknown;
 };
 owner: SimpleUser9;
 /**
  * Whether the repository is private or public.
  */
 private: boolean;
 html_url: string;
 description: string | null;
 fork: boolean;
 url: string;
 archive_url: string;
 assignees_url: string;
 blobs_url: string;
 branches_url: string;
 collaborators_url: string;
 comments_url: string;
 commits_url: string;
 compare_url: string;
 contents_url: string;
 contributors_url: string;
 deployments_url: string;
 downloads_url: string;
 events_url: string;
 forks_url: string;
 git_commits_url: string;
 git_refs_url: string;
 git_tags_url: string;
 git_url: string;
 issue_comment_url: string;
 issue_events_url: string;
 issues_url: string;
 keys_url: string;
 labels_url: string;
 languages_url: string;
 merges_url: string;
 milestones_url: string;
 notifications_url: string;
 pulls_url: string;
 releases_url: string;
 ssh_url: string;
 stargazers_url: string;
 statuses_url: string;
 subscribers_url: string;
 subscription_url: string;
 tags_url: string;
 teams_url: string;
 trees_url: string;
 clone_url: string;
 mirror_url: string | null;
 hooks_url: string;
 svn_url: string;
 homepage: string | null;
 language: string | null;
 forks_count: number;
 stargazers_count: number;
 watchers_count: number;
 size: number;
 /**
  * The default branch of the repository.
  */
 default_branch: string;
 open_issues_count: number;
 /**
  * Whether this repository acts as a template that can be used to generate new repositories.
  */
 is_template?: boolean;
 topics?: string[];
 /**
  * Whether issues are enabled.
  */
 has_issues: boolean;
 /**
  * Whether projects are enabled.
  */
 has_projects: boolean;
 /**
  * Whether the wiki is enabled.
  */
 has_wiki: boolean;
 has_pages: boolean;
 /**
  * Whether downloads are enabled.
  */
 has_downloads: boolean;
 /**
  * Whether the repository is archived.
  */
 archived: boolean;
 /**
  * Returns whether or not this repository disabled.
  */
 disabled: boolean;
 /**
  * The repository visibility: public, private, or internal.
  */
 visibility?: string;
 pushed_at: string | null;
 created_at: string | null;
 updated_at: string | null;
 /**
  * Whether to allow rebase merges for pull requests.
  */
 allow_rebase_merge?: boolean;
 template_repository?: {
   id?: number;
   node_id?: string;
   name?: string;
   full_name?: string;
   owner?: {
     login?: string;
     id?: number;
     node_id?: string;
     avatar_url?: string;
     gravatar_id?: string;
     url?: string;
     html_url?: string;
     followers_url?: string;
     following_url?: string;
     gists_url?: string;
     starred_url?: string;
     subscriptions_url?: string;
     organizations_url?: string;
     repos_url?: string;
     events_url?: string;
     received_events_url?: string;
     type?: string;
     site_admin?: boolean;
     [k: string]: unknown;
   };
   private?: boolean;
   html_url?: string;
   description?: string;
   fork?: boolean;
   url?: string;
   archive_url?: string;
   assignees_url?: string;
   blobs_url?: string;
   branches_url?: string;
   collaborators_url?: string;
   comments_url?: string;
   commits_url?: string;
   compare_url?: string;
   contents_url?: string;
   contributors_url?: string;
   deployments_url?: string;
   downloads_url?: string;
   events_url?: string;
   forks_url?: string;
   git_commits_url?: string;
   git_refs_url?: string;
   git_tags_url?: string;
   git_url?: string;
   issue_comment_url?: string;
   issue_events_url?: string;
   issues_url?: string;
   keys_url?: string;
   labels_url?: string;
   languages_url?: string;
   merges_url?: string;
   milestones_url?: string;
   notifications_url?: string;
   pulls_url?: string;
   releases_url?: string;
   ssh_url?: string;
   stargazers_url?: string;
   statuses_url?: string;
   subscribers_url?: string;
   subscription_url?: string;
   tags_url?: string;
   teams_url?: string;
   trees_url?: string;
   clone_url?: string;
   mirror_url?: string;
   hooks_url?: string;
   svn_url?: string;
   homepage?: string;
   language?: string;
   forks_count?: number;
   stargazers_count?: number;
   watchers_count?: number;
   size?: number;
   default_branch?: string;
   open_issues_count?: number;
   is_template?: boolean;
   topics?: string[];
   has_issues?: boolean;
   has_projects?: boolean;
   has_wiki?: boolean;
   has_pages?: boolean;
   has_downloads?: boolean;
   archived?: boolean;
   disabled?: boolean;
   visibility?: string;
   pushed_at?: string;
   created_at?: string;
   updated_at?: string;
   permissions?: {
     admin?: boolean;
     maintain?: boolean;
     push?: boolean;
     triage?: boolean;
     pull?: boolean;
     [k: string]: unknown;
   };
   allow_rebase_merge?: boolean;
   temp_clone_token?: string;
   allow_squash_merge?: boolean;
   allow_auto_merge?: boolean;
   delete_branch_on_merge?: boolean;
   allow_update_branch?: boolean;
   allow_merge_commit?: boolean;
   subscribers_count?: number;
   network_count?: number;
   [k: string]: unknown;
 } | null;
 temp_clone_token?: string;
 /**
  * Whether to allow squash merges for pull requests.
  */
 allow_squash_merge?: boolean;
 /**
  * Whether to allow Auto-merge to be used on pull requests.
  */
 allow_auto_merge?: boolean;
 /**
  * Whether to delete head branches when pull requests are merged
  */
 delete_branch_on_merge?: boolean;
 /**
  * Whether to allow merge commits for pull requests.
  */
 allow_merge_commit?: boolean;
 /**
  * Whether to allow forking this repo
  */
 allow_forking?: boolean;
 subscribers_count?: number;
 network_count?: number;
 open_issues: number;
 watchers: number;
 master_branch?: string;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* License Simple
*/
export interface LicenseSimple1 {
 key: string;
 name: string;
 url: string | null;
 spdx_id: string | null;
 node_id: string;
 html_url?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser8 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser9 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser10 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link1 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link2 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link3 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link4 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link5 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link6 {
 href: string;
 [k: string]: unknown;
}
/**
* Hypermedia Link
*/
export interface Link7 {
 href: string;
 [k: string]: unknown;
}
/**
* Simple User
*/
export interface SimpleUser11 {
 name?: string | null;
 email?: string | null;
 login: string;
 id: number;
 node_id: string;
 avatar_url: string;
 gravatar_id: string | null;
 url: string;
 html_url: string;
 followers_url: string;
 following_url: string;
 gists_url: string;
 starred_url: string;
 subscriptions_url: string;
 organizations_url: string;
 repos_url: string;
 events_url: string;
 received_events_url: string;
 type: string;
 site_admin: boolean;
 starred_at?: string;
 [k: string]: unknown;
}

 export type DemoEntry = DiffEntry[];

 /**
  * Diff Entry
  */
 export interface DiffEntry {
   sha: string;
   filename: string;
   status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
   additions: number;
   deletions: number;
   changes: number;
   blob_url: string;
   raw_url: string;
   contents_url: string;
   patch?: string;
   previous_filename?: string;
   [k: string]: unknown;
 }
 